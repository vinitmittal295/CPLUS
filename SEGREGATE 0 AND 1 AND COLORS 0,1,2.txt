22) SEGREGATE 0 1(CODER ARMY)
1) SORTING METHOD

2 ) COUNTING METHOD
#include <iostream>
#include <bits/stdc++.h>
using namespace std;
int main(){
    vector<int>arr={0,1,0,1,0,1,0};
    int n=arr.size();
    int count=0;
    int count1=0;
    for(int i=0; i<n; i++){
        if(arr[i]==0){
            count++;
        }
        else{
            count1++;
        }
    }
    for(int i=0; i<count; i++){
        arr[i]=0;
    }
    for(int i=count; i<n; i++){
        arr[i]=1;
    }
    for(auto it: arr){
        cout<<it<<endl;
    }
    
}

3) TWO POINTRER APPROACH (problem on gfg)

#include <iostream>
#include <bits/stdc++.h>
using namespace std;
int main(){
    vector<int>arr={0,1,0,1,0,1,0};
    int n=arr.size();
    int start=0;
    int end=n-1;
    while(start<end){
        if(arr[start]==0){
            start++;
        }
        else if(arr[start]==1){
            
            if(arr[end]==0){
                swap(arr[start],arr[end]);
                start++;
                end--;
            }
            else if(arr[end]==1){
                end--;
            }
        }
    }
    for(auto it: arr){
        cout<<it<<endl;
    }
    
}


------------------COLORS SEG------------

18) LEETCODE 75 SORT COLORS SEGREGATE 0,1,2
FIRST METHOD
sort(nums.begin(),nums.end())

SECOND METHOD (COUNTING METHOD)
#include<bits/stdc++.h>
using namespace std;

int main()
{
    vector<int>num={0,1,2,0,1,2};
    int zeros=0;
    int ones=0;
    int twos=0;
    
    for(int i=0; i<num.size(); i++){
        if(num[i]==0){
            zeros++;
        }
        else if(num[i]==1){
            ones++;
        }
        else{
            twos++;
            
        }
        
    }
    int i=0;
    while(zeros--){
        num[i]=0;
        i++;
    }
    while(ones--){
        num[i]=1;
        i++;
    }
    while(twos--){
        num[i]=2;
        i++;
    }
    for(auto it:num){
        cout<<it<<" ";
    }
}

THIS IS METHOD THREE
class Solution {
public:
    void sortColors(vector<int>& nums) {
        int l=0; 
        int m=0;
        int h=nums.size()-1;
        while(m<=h){
            if(nums[m]==0){
                swap(nums[l],nums[m]);
                l++;
                m++;
            }
            else if(nums[m]==1){
                m++;
            }
            else{
                swap(nums[m],nums[h]);
                h--;
            }

        }
    }
};