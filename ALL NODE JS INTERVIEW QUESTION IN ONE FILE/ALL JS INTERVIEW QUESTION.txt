THROTTLING

Throttle ensures that a function is only executed once every set interval, regardless of how many times the event occurs.

✅ Use Case:
Scroll position tracking

Rate-limiting API calls

DEBOUNCING

Debounce ensures that a function is only executed after a certain delay, and only if the event hasn't been triggered again in that 
delay.

✅ Use Case:
Search input auto-suggestions

Resize event handler



1. What are the different data types in JavaScript?
Answer:

JavaScript has 8 data types:

Primitive types (immutable):
String: text — 'hello'

Number: integer or float — 42, 3.14

Boolean: true or false

Null: intentional absence of any value

Undefined: a variable declared but not assigned

BigInt: large integers beyond 2^53 - 1

Symbol: unique identifiers

Non-primitive (reference) type:
Object: key-value pairs, arrays, functions, etc.

✅ 2. What is the difference between == and ===?
Answer:

== (loose equality): compares values, converts types if needed (type coercion).

=== (strict equality): compares values and types without conversion.

0 == '0'     // true
0 === '0'    // false
Use === to avoid unexpected behavior due to type coercion.

✅ 3. What is hoisting in JavaScript?
Answer:

Hoisting is JavaScript's default behavior of moving variable and function declarations to the top of their scope during compilation.

js
Copy
Edit
console.log(a); // undefined
var a = 10;
This works because var a is hoisted (moved up), but initialization is not.

With let and const, the variables are hoisted but not initialized, so accessing them before declaration causes a ReferenceError.

✅ 4. What is the difference between var, let, and const?
Feature	var	let	const
Scope	Function scope	Block scope	Block scope
Hoisting	Yes (value = undefined)	Yes (TDZ)	Yes (TDZ)
Reassignment	Yes	Yes	❌ No
Redeclaration	Yes	❌ No	❌ No

TDZ = Temporal Dead Zone

✅ 5. What is closure in JavaScript?
Answer:

A closure is a function that "remembers" its outer lexical scope even after the outer function has finished executing.

js
Copy
Edit
function outer() {
  let count = 0;
  return function inner() {
    count++;
    return count;
  };
}

const counter = outer();
console.log(counter()); // 1
console.log(counter()); // 2
Closures are used for:

Data privacy

Function factories

Memoization

Event handlers

✅ 6. What is the event loop in JavaScript?
Answer:

JavaScript is single-threaded, but asynchronous using an event loop.

Phases:
Executes all synchronous code.

Handles async tasks via a callback queue.

Event loop checks if the call stack is empty, then pushes queued tasks.

Example:

console.log('1');

setTimeout(() => console.log('2'), 0);

console.log('3');

// Output: 1, 3, 2
Even though setTimeout has 0ms delay, it runs after synchronous code.

✅ 7. What are promises in JavaScript?
Answer:

A Promise is an object representing the future result of an asynchronous operation.

const promise = new Promise((resolve, reject) => {
  setTimeout(() => resolve('Done!'), 1000);
});

promise.then(result => console.log(result));
States of a Promise:
pending

fulfilled

rejected

Used to avoid callback hell and make async code cleaner.

✅ 8. What is this in JavaScript?
Answer:

this refers to the context in which a function is called.

Depends on how the function is invoked:
js
Copy
Edit
const obj = {
  name: 'John',
  greet() {
    console.log(this.name);
  }
};
obj.greet(); // 'John'
Arrow functions do not bind their own this; they inherit it from the parent scope.

✅ 9. What is the difference between call(), apply(), and bind()?
js
Copy
Edit
function greet(city) {
  console.log(`${this.name} from ${city}`);
}
const user = { name: 'Alice' };

greet.call(user, 'Paris');   // Alice from Paris
greet.apply(user, ['Paris']); // Alice from Paris

const newFunc = greet.bind(user, 'Paris');
newFunc();                   // Alice from Paris
Method	Description
call	Calls function with this and arguments passed individually
apply	Same, but arguments as array
bind	Returns a new function with bound this

✅ 10. What is the difference between synchronous and asynchronous code?
Synchronous Code	Asynchronous Code
Executes line-by-line	Executes with possible delays
Blocking	         Non-blocking
Slower with heavy tasks	  Efficient for I/O or network

Example of async:

setTimeout(() => {
  console.log('This runs later');
}, 1000);
console.log('This runs first');
Would you like this in a downloadable PDF or a section focused on advanced JS (e.g., prototypal inheritance, modules, or event delegation)?





