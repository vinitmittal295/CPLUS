Q)TWO SUM (CODER ARMY) Two Sum II - Input Array Is Sortedleetcode (167)
 #include <iostream>
#include <bits/stdc++.h>
using namespace std;
int main(){
    vector<int>arr={2,7,11,15,27};
    int n=arr.size();
    int target=22;
    vector<int>ans;
    for(int i=0; i<n; i++){
        for(int j=i+1; j<n; j++){
            if(arr[i]+arr[j]==target){
                ans.push_back(arr[i]);
                ans.push_back(arr[j]);
            }
        }
    }
    for(auto it: ans){
        cout<<it<<endl;
    }
    
}


second method
Given a 1-indexed array of integers numbers that is already sorted in non-decreasing order, find two numbers such that they add up to a specific target number. Let these two numbers be numbers[index1] and numbers[index2] where 1 <= index1 < index2 <= numbers.length.

Return the indices of the two numbers, index1 and index2, added by one as an integer array [index1, index2] of length 2.

The tests are generated such that there is exactly one solution. You may not use the same element twice.

Your solution must use only constant extra space.

 

Example 1:

Input: numbers = [2,7,11,15], target = 9
Output: [1,2]
Explanation: The sum of 2 and 7 is 9. Therefore, index1 = 1, index2 = 2. We return [1, 2].


class Solution {
public:
    vector<int> twoSum(vector<int>& numbers, int target) {
        vector<int>ans;
        int start=0;
        int end=numbers.size()-1;
        while(start<end){
            if(numbers[start]+numbers[end]==target){
                ans.push_back(start+1);
                ans.push_back(end+1);
                return ans;
            }
            else if(numbers[start]+numbers[end]<target){
                start++;
            }
            else{
                end--;
            }
        }
        return ans;
    }
};

ON GDB COMPILER
#include <iostream>
#include <bits/stdc++.h>
using namespace std;
int main(){
    vector<int>numbers={2,7,11,15,27};
    int n=numbers.size();
    int target=22;
    int start=0;
    int end=n-1;
    vector<int>ans;
    while(start<end){
            if(numbers[start]+numbers[end]==target){
                ans.push_back(start+1);
                ans.push_back(end+1);
                // return ans;
                // cout<<ans;
                break;
            }
            else if(numbers[start]+numbers[end]<target){
                start++;
            }
            else{
                end--;
            }
        }
    for(auto it: ans){
        cout<<it<<endl;
    }
    
}