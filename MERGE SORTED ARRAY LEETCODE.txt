You are given two integer arrays nums1 and nums2, sorted in non-decreasing order, and two integers m and n, representing the number of elements in nums1 and nums2 respectively.

Merge nums1 and nums2 into a single array sorted in non-decreasing order.

The final sorted array should not be returned by the function, but instead be stored inside the array nums1. To accommodate this, nums1 has a length of m + n, where the first m elements denote the elements that should be merged, and the last n elements are set to 0 and should be ignored. nums2 has a length of n.

 

Example 1:

Input: nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3
Output: [1,2,2,3,5,6]
Explanation: The arrays we are merging are [1,2,3] and [2,5,6].
The result of the merge is [1,2,2,3,5,6] with the underlined elements coming from nums1.
Example 2:

Input: nums1 = [1], m = 1, nums2 = [], n = 0
Output: [1]
Explanation: The arrays we are merging are [1] and [].
The result of the merge is [1].
Example 3:

Input: nums1 = [0], m = 0, nums2 = [1], n = 1
Output: [1]
Explanation: The arrays we are merging are [] and [1].
The result of the merge is [1].
Note that because m = 0, there are no elements in nums1. The 0 is only there to ensure the merge result can fit in nums1.
 

Constraints:

nums1.length == m + n
nums2.length == n
0 <= m, n <= 200
1 <= m + n <= 200
-109 <= nums1[i], nums2[j] <= 109
 



ANS


/******************************************************************************

Welcome to GDB Online.
GDB online is an online compiler and debugger tool for C, C++, Python, Java, PHP, Ruby, Perl,
C#, OCaml, VB, Swift, Pascal, Fortran, Haskell, Objective-C, Assembly, HTML, CSS, JS, SQLite, Prolog.
Code, Compile, Run and Debug online from anywhere in world.

*******************************************************************************/
#include <bits/stdc++.h>

using namespace std;

int main()
{
    vector<int>nums1={1,2,3,6,8,10};
    vector<int>nums2={4,5};
    vector<int>nums3(8,0);
    int m=nums1.size();
    int n=nums2.size();
    int i=0,j=0, k=0;
    
    while(i<m && j<n){
        if(nums1[i]<nums2[j]){
            nums3[k]=nums1[i];
            i++;
            k++;
        }
        else{
            nums3[k]=nums2[j];
            j++;
            k++;
        }
    }
    
    while(i<m){
        nums3[k]=nums1[i];
        i++;
        k++;
    }
    while(j<n){
        nums3[k]=nums2[j];
        j++;
        k++;
    }
    for(auto it:nums3){
        cout<<it<<" ";
    }

    return 0;
}





class Solution {
public:
    void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {
        for(int i=0; i<n; i++){
            nums1[m+i]=nums2[i];
        }
        sort(nums1.begin(),nums1.end());
    }
};



in same arrau 

#include <bits/stdc++.h>

using namespace std;

int main()
{
    vector<int>nums1={1,2,3,6,8,10}; // original nums1
    vector<int>nums2={4,5};          // nums2
    int m = nums1.size();
    int n = nums2.size();

    // Resize nums1 to hold m + n elements
    nums1.resize(m + n);
    
    int i = m - 1; // Index for the last element in the original nums1
    int j = n - 1; // Index for the last element in nums2
    int k = m + n - 1; // Index for the last element in the resized nums1
    
    // Start merging from the end of the arrays
    while(i >= 0 && j >= 0) {
        if(nums1[i] > nums2[j]) {
            nums1[k] = nums1[i];
            i--;
        } else {
            nums1[k] = nums2[j];
            j--;
        }
        k--;
    }
    
    // If any elements are left in nums2, copy them
    while(j >= 0) {
        nums1[k] = nums2[j];
        j--;
        k--;
    }
    
    // Output the merged array
    for(auto it: nums1){
        cout << it << " ";
    }

    return 0;
}
